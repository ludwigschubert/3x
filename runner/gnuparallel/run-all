#!/usr/bin/env bash
# run-all -- run given runs using GNU parallel
# Usage:
# > run-all  RUN_SERIALS_FILE  RUN_IDS_FILE  RUN_ARGS_FILE
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-09-23
set -eu
. multi-runner.sh
. remote-runner.sh

_3X_WORKER_DIR=$(readlink -f "$1"); shift
FileSerials=$_3X_WORKER_DIR/runSerials
FileRunIds=$_3X_WORKER_DIR/runIds
FileRunArgs=$_3X_WORKER_DIR/runArgs

# some sanity checks
[ -s "$FileSerials" -a -s "$FileRunIds" -a -s "$FileRunArgs" ] ||
    runner-error "Nothing to run"
numRuns=$(wc -l <"$FileSerials")
[ $numRuns -eq $(wc -l <"$FileRunIds") -a $numRuns -eq $(wc -l <"$FileRunArgs") ] ||
    runner-error "Number of runs mismatch in input"


# some vocabularies
parallelVerboseOpts=()
[ ! -t 1 ] || be-quiet +5 || parallelVerboseOpts+=(--progress)
              be-quiet +7 || parallelVerboseOpts+=(--verbose)
parallelOnRemotes() {
    parallel --plain \
        --controlmaster \
        --sshloginfile "$_3X_WORKER_DIR"/target/remotes \
        "${parallelVerboseOpts[@]:---silent}" \
        "$@"
}
flattenScript() {
    sed 's/^[[:space:]]*//; s/[[:space:]]#.*//' |
    grep -v '^[[:space:]]*$' | tr '\n' ';'
}
postprocessFinishedRuns() {
    # TODO "parallel" at this level is too energy inefficient: push the
    # parallelism down into run.store by vectorizing and each operation in it
    for-picked-runs list-only serial,runId "state#"=RUNNING |
    parallel --plain --max-procs 50% --no-run-if-empty '
        set -eu
        postprocessRun() {
            local serial=$1 _3X_RUN=$2
            [ -e "$_3X_ROOT/$_3X_RUN".ok ]
            export _3X_RUN
            run.store
            state=$(judge-state-of-run)
            queue mark-as $state $serial
            echo "$_3X_RUN: $state"
            rm -f "$_3X_ROOT/$_3X_RUN".ok
        }
        eval postprocessRun' | 
    if be-quiet; then cat
    else tee /dev/stderr
    fi >runs-just-finished
}


# setup worker directory to run GNU Parallel in isolation
cd "$_3X_WORKER_DIR"
ln -sfn "$_3X_ROOT"/run .

# load target configuration
[ -e target/remotes.orig ] || mv -f target/remotes target/remotes.orig
cp -f target/remotes.orig target/remotes
numRemotes=$(no-comments <target/remotes | wc -l)
runner-msg "Using $numRemotes remote hosts with GNU Parallel"
workdir=$(cat "$(findOneInTargetOrRunners workdir)")
runner-msg +1 " working under directory of each host: $workdir"
shareddir=$(cat "$(findOneInTargetOrRunners shareddir)")
[ -z "$shareddir" ] ||
    runner-msg +1 " using shared directory across hosts: $shareddir"
envSpec=(
$(useTargetOrRunnerConfig environ " assembling runs with environment spec:")
)

# clear any run directories that may get in the way
runner-msg +3 "Clearing stale local records of runs"
xargs <"$FileRunIds"  unarchive "$_3X_ARCHIVE" 2>/dev/null || true
xargs <"$FileRunIds"  rm -rf -- &

# how to collect the list of available (or responsive) hosts
updateResponsiveRemotes() {
    runner-msg +1 "Finding responsive ones among $numRemotes remote hosts"
    parallelOnRemotes \
        --nonall \
        --timeout 15 \
        'hostname -f' \
        >target/remotes.responsive \
        || true
    [ -s target/remotes.responsive ] ||
        runner-error "No responsive remote hosts available"
    grep >target/remotes.alive -iFf target/remotes.responsive <target/remotes.orig
    runner-msg +1 " using only $(wc -l <target/remotes.responsive) responsive hosts"
    mv -f target/remotes.alive target/remotes
}

# transfer experiment definition to remote hosts for assembly
# TODO can we skip transferring output?
# TODO assemble output from run.store instead of run.assemble (base runner, generate-assembly-script)
runner-msg +1 "Setting up remote hosts"
mobileRepo=$REMOTE_ROOT_PREFIX/$(experiment-id)
prepare-remote-root "$mobileRepo"
sessionId=$(cat sessionId 2>/dev/null ||
    echo session.$$ | tee sessionId)
rm -rf "$mobileRepo"/.3x/session.*
mkdir -p "$mobileRepo"/.3x/$sessionId
# TODO use $_3X_ASSEMBLE instead of hard-coding assemble.sh
mv -f "$mobileRepo"/.3x/assemble.sh "$mobileRepo"/.3x/$sessionId/
ln -f "$FileRunIds"                 "$mobileRepo"/.3x/$sessionId/runIds
if [ -n "$shareddir" ]; then
    updateResponsiveRemotes
    shareddirQualified="$(head -n 1 <target/remotes.responsive):$shareddir"
    # we can rsync $mobileRepo to the $shareddir only once
    remoteMobileRepo=$(
        parseRemote "$shareddirQualified" &>/dev/null
        echo "$remoteRoot/${mobileRepo##*/}"
        {
            let SHLVL+=2
            cd "$_3X_WORKER_DIR/$mobileRepo"
            sshRemote mkdir -p "$remoteRoot"/
            rsyncToRemote "${mobileRepo##*/}"/ --archive --hard-links --relative \
                {.3x,input,program,output}/
        } >&2
    )
    cleanupRemoteRoot() {
        (
        let SHLVL+=2
        parseRemote "$shareddirQualified" &>/dev/null
        sshRemote rm -rf "$remoteMobileRepo"/.3x/$sessionId
        )
    }
else
    updateResponsiveRemotes
    # send $mobileRoot to all hosts in parallel when there's no shared filesystem
    remoteMobileRepo="$mobileRepo"
    parallelOnRemotes \
        --nonall \
        --basefile "$remoteMobileRepo"/.3x/ \
        --basefile "$remoteMobileRepo"/input/ \
        --basefile "$remoteMobileRepo"/program/ \
        --basefile "$remoteMobileRepo"/output/ \
        true \
        2>/dev/null & # XXX parallel 20130924 always does --cleanup for --basefile
    cleanupRemoteRoot() {
        parallelOnRemotes \
            --nonall \
            rm -rf "$remoteMobileRepo"/.3x/$sessionId
    }
fi

wait # for remote setup and stale records clearing jobs to finish
numRemotes=$(no-comments <target/remotes | wc -l)


# store finished runs and reflect their states to queue asynchronously
rm -f parallel-finished
(
set +e
while numRUNNING=$(for-picked-runs count "state#"=RUNNING); [ $numRUNNING -gt 0 ]; do
    sleep 5 # TODO use watchdog dirnames of runIds for *.ok instead of polling
    postprocessFinishedRuns
    if [ -s runs-just-finished ]; then
        let numRUNNING-=$(wc -l <runs-just-finished)
        [[ $numRUNNING -gt 0 ]] || break
        runner-msg "Waiting for $numRUNNING/$numRuns more runs to finish"
    fi
    if [ -e parallel-finished ]; then
        postprocessFinishedRuns  # for one last time for sure
        for-picked-runs list-only serial "state#"=RUNNING |
        xargs queue mark-as ABORTED
        runner-msg "All finished $numRuns runs have been archived locally"
        break
    fi
done
) &


# launch runs at remote hosts
runner-msg +1 "Launching $numRuns runs in parallel at $numRemotes remote hosts"
# TODO --resume --joblog parallel.joblog.txt \
parallelOnRemotes \
    --workdir "$workdir" \
    --xapply \
    --arg-file "$FileRunIds" \
    --arg-file "$FileRunArgs" \
    --no-run-if-empty \
    --return '{1}' \
    --return '{1}.ok' \
    "$(flattenScript <<<'
        set -eu
        export _3X_RUN={1}
        args={2}
        [ -n "$_3X_RUN" ] || exit 2

        '"$(escape-args-for-shell \
            remoteMobileRepo="$remoteMobileRepo" \
            sessionId="$sessionId" \
            )"'

        runDir="$PWD/$_3X_RUN"
        rm -rf "$runDir"

        cd
        cd "$remoteMobileRepo"
        export _3X_ROOT=$PWD
        PATH="$_3X_ROOT/.3x/bin:$PATH"
        set --
        envVars=($(bash -eu record-environ.sh '"$(escape-args-for-shell "${envSpec[@]}")"'))
        [ ${#envVars[@]} -eq 0 ] || set -- "${envVars[@]}"
        eval '\''.3x/$sessionId/assemble.sh "$runDir" $args'\'' -- "$@" HOSTNAME=$HOSTNAME

        touch "$runDir.ok" || true
        cd "$runDir"
        exec ./execute.sh
        ')" \
    || true
touch parallel-finished  # so the postprocessor finishes as well

# clean up on remote asynchronously
runner-msg +2 "Cleaning up records of runs at $numRemotes remote hosts"
(
parallelOnRemotes \
    --nonall \
    --timeout 30 \
    "$(flattenScript <<<'
        set -eu
        '"$(escape-args-for-shell \
            workdir="$workdir" \
            remoteMobileRepo="$remoteMobileRepo" \
            sessionId="$sessionId" \
            )"'
        cd "$workdir"
        sed -e '\''p; s/$/.ok/'\'' <~/"$remoteMobileRepo"/.3x/$sessionId/runIds | xargs rm -rf --
    ')"
cleanupRemoteRoot
) &


wait # for remote clean up jobs and postprocessor to finish

summary=
addToSummary() {
    local state=$1
    local num=$(for-picked-runs count "state#"=$state)
    [ $num -eq 0 ] || summary+=", $num $state"
}
addToSummary DONE
addToSummary FAILED
addToSummary ABORTED
runner-msg "Execution finished for $numRuns runs (${summary#, })"
