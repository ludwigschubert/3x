#!/usr/bin/env bash
# > 3x target TARGET define ssh-cluster  REMOTE_URL...  SHARED_PATH  [NAME[=VALUE]]...
# Defines a new target, named TARGET, that has a cluster of machines, each
# accessible via ssh.  There must be a shared filesystem across all machines
# that is accessible via SHARED_PATH from every machine.
#  
# REMOTE_URL can be in one of these forms:
# - USER@HOSTNAME:WORKING_DIR
# - ssh://USER@HOSTNAME:PORT/WORKING_DIR
#  
# The following NAMEs or NAME=VALUE pairs specify the environment variables you
# want to pass down to the executing runs.  VALUE in each NAME=VALUE pair is
# the default value to use if the variable named NAME is not declared.
#
#
# ssh-cluster/target-define -- define an ssh cluster target
# > _3X_ROOT=... \
# > _3X_RUNNER=... \
# > target-define TARGET REMOTE_URL... SHARED_PATH [NAME[=VALUE]]...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-02-23
set -eu

super "$0" "$@"

. runner.sh
. remote-runner.sh

Target=$1; shift

export _3X_TARGET=$Target
export _3X_TARGET_DIR="$_3X_ROOT"/run/target/"$Target"

cd "$_3X_TARGET_DIR"


[[ $# -gt 0 ]] || usage "$0" "At least one REMOTE_URL must be given"
remotes=()
while [[ $# -gt 0 ]]; do
    case $1 in
        *:*|ssh://*)
            RemoteURL=$1; shift
            ;;
        *)
            break
    esac
    # check if REMOTE_URL is valid
    parseRemote "$RemoteURL"
    remotes+=("$RemoteURL")
done
# replace the list of remote URLs
[[ ${#remotes[@]} -gt 0 ]] || usage "$0" "At least one REMOTE_URL must be given"
define-with-backup remotes "$(printf '%s\n' "${remotes[@]}")"


# replace the SHARED_PATH
[[ $# -gt 0 ]] || usage "$0" "Missing SHARED_PATH"
SharedPath=$1; shift
define-with-backup shared-path "$SharedPath"


# replace the environment configuration
create-backup-candidate environ
if [[ $# -gt 0 ]]; then
    for nameValuePair; do
        echo $nameValuePair
    done >environ
else # use default configuration if none given
    cp -f "$(findOneInTargetOrRunners environ)" environ
fi
keep-backup-if-changed environ

# move a cached environment
! [[ -e environ.cached ]] || mv -f environ.cached environ.cached~
