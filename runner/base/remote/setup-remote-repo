#!/usr/bin/env bash
# remote/setup-remote-repo -- set up a remote repository
# 
# > . find-runner.sh -
# > cd "$_3X_WORKER_DIR"
# > setup-remote-repo REMOTE_URL _3X_WORKER_ID
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-02-24
set -eu
. runner.sh
. remote-runner.sh

[[ $# -eq 2 ]] || usage "$0" "Both REMOTE_URL and _3X_WORKER_ID are necessary"

remote=$1; shift
_3X_WORKER_ID=$1; shift

parseRemote $remote
sharedPath=$remoteRoot

runner-msg "setting up remote repository at $remote/$_3X_WORKER_ID"

mkdir -p remote-root/.3x
ln  -fn "$_3X_ASSEMBLE"                remote-root/.3x/
ln  -fn "$_3X_ROOT"/.3x/description    remote-root/.3x/
ln -sfn "$_3X_ROOT"/input              remote-root/
ln -sfn "$_3X_ROOT"/program            remote-root/
ln -sfn "$_3X_ROOT"/output             remote-root/
remoteRootPaths=(
    .3x/{assemble.sh,description}
    input/ program/ output/
)

cd remote-root

# first, construct a remote repo by sharing already available copies
{
    sharedPath_escaped=$(escape-args-for-shell "$sharedPath")
    echo "mkdir -p $sharedPath_escaped/tmp"
    echo "chmod u=rwx,go= $sharedPath_escaped"
    nodups -n mktree "$sharedPath"/objects \
        "$sharedPath/$_3X_WORKER_ID" \
        "${remoteRootPaths[@]}"
} |
sshRemote bash -s

# then, transfer any missing files
rsyncToRemote "$_3X_WORKER_ID"/ \
    --archive --delete-after --copy-unsafe-links --relative \
    "${remoteRootPaths[@]}"

# finally, augment shared path with the new files
sshRemote "${_3x:-3x}" remote "$sharedPath" "$_3X_WORKER_ID" "$sharedPath/$_3X_WORKER_ID" \
    run nodups archive "$sharedPath"/objects \
        "$sharedPath/$_3X_WORKER_ID"
