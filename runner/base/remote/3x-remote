#!/usr/bin/env bash
# 3x-remote -- start/stop runs from remote
# 
# > 3x remote SHARED_PATH SESSION_ID WORKDIR  start <RUNS
# > 3x remote SHARED_PATH SESSION_ID WORKDIR  stop       
# > 3x remote SHARED_PATH SESSION_ID WORKDIR  is-finished
# > 3x remote SHARED_PATH SESSION_ID WORKDIR  cleanup
# > 3x remote SHARED_PATH SESSION_ID WORKDIR  run COMMAND [ARG]...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-02-24
set -eu

[[ $# -ge 4 ]] || usage "$0" "Missing ROOT_PATH SESSION_ID WORKDIR"

# find the experiment repository clone
RemoteSharedPath=$1; shift
_3X_SESSION_ID=$1; shift
WorkDirRoot=$1; shift
Cmd=$1; shift

_3X_ROOT="$RemoteSharedPath/$_3X_SESSION_ID"
export _3X_ROOT=$(readlink -f "$_3X_ROOT")

WorkDir="$WorkDirRoot/$_3X_SESSION_ID"

determine-availability() {
    numCPUs=$(node -e 'var cpus = require("os").cpus(); console.log(cpus.length);')
    speedSumCPUs=$(coffee -e 'sum=0; sum+=speed for {speed} in require("os").cpus(); console.log sum')
    loadAVG15=$(uptime | sed 's/.*, //; q')
    loadAVG15rounded=$(bc <<<"($loadAVG15+0.5)*10/10")
    numParallel=$((numCPUs - loadAVG15rounded))
    [[ $numParallel -gt 0 ]] || numParallel=1
}

3x-remote() {
local Cmd=$1; shift
case $Cmd in
    start)
        # set up a working directory
        mkdir -p "$WorkDir"
        cd "$WorkDir"
        chmod u=rwx,go= ..
        # that resembles the repository clone
        for f in .3x input program output; do
            ! [[ "$_3X_ROOT"/$f -ef $f ]] || continue
            ln -sfn "$_3X_ROOT"/$f  .
        done

        # record PGID for easy stopping later
        ps -o pgid= -p $$ >runs.pgid

        # keep a copy of runs passed over stdin
        cat >runs

        # determine degree of parallelism if not given
        determine-availability

        . find-run-archive.sh

        # prepare environment
        record-environ.sh $(cat "$_3X_ROOT"/.3x/environ) >runs.environ

        # run each with xargs
        xargs <runs -P $numParallel -L 1 remote-run \
            >runs.stdout 2>runs.stderr 3>runs.finished &
        ;;

    stop)
        if cd "$WorkDir" 2>/dev/null; then
            if [[ -s runs.pgid ]]; then
                pgid=$(cat runs.pgid 2>/dev/null)
                isnt-running() { ! ps -o pid= -g "$pgid" &>/dev/null; }
                isnt-running || kill -TERM -"$pgid" ||
                isnt-running || kill -KILL -"$pgid" ||
                true
            fi
            cd - >/dev/null
        fi
        rm -rf "$WorkDir"
        ;;

    cleanup)
        if [[ -d "$_3X_ROOT" && ! -e "$_3X_ROOT".deleting ]]; then
            touch "$_3X_ROOT".deleting
            trap 'rm -f "$_3X_ROOT".deleting' EXIT
            rm -rf "$_3X_ROOT"
        else
            false
        fi
        ;;

    is-finished)
        pgid=$(cat "$WorkDir"/runs.pgid 2>/dev/null)
        ! ps -o pid= -g "$pgid" &>/dev/null
        {
            totalScheduled=$(wc -l <"$WorkDir"/runs || echo 0)
            totalFinished=$(wc -l <"$WorkDir"/runs.finished || echo 0)
            [[ $totalScheduled -eq $totalFinished ]]
        } 2>/dev/null
        ;;

    ping)
        mkdir -p "$_3X_ROOT"
        determine-availability
        echo numParallel=$numParallel \
            numCPUs=$numCPUs \
            loadAVG15=$loadAVG15 \
            loadAVG15rounded=$loadAVG15rounded \
            speedSumCPUs=$speedSumCPUs \
            #
        ;;

    run)
        # run given command inside 3X environment
        mkdir -p "$WorkDir"
        cd "$WorkDir"
        "$@"
        ;;

    *)
        error "$Cmd: Unknown command"
        ;;
esac
}
3x-remote "$Cmd" "$@"
