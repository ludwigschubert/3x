#!/usr/bin/env bash
# > 3x start
# Starts executing runs in current queue.
#
# queue-start -- start execution of runs in current queue
# 
# > . find-runner.sh -
# > setsid queue-start
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-02-16
set -eu
. runner.sh

_3X_WORKER_DIR=
onexit() {
    c=$?
    [[ $c -ne 0 ]] || touch "$_3X_WORKER_DIR"/scheduled
    [[ -z "$_3X_WORKER_DIR" ]] ||
        lockproc "$_3X_WORKER_DIR"/scheduling release
    return $c
}
trap onexit EXIT

# find existing _3X_WORKER_DIR that hasn't been properly scheduled
for dir in "$WORKER_DIR_PREFIX"*; do
    [[ -d "$dir" ]] || continue
    ! [[ -e "$dir"/scheduled ]] || continue
    ! lockproc "$dir"/scheduling alive || continue
    lockproc "$dir"/scheduling grab || continue
    _3X_WORKER_DIR=$dir
    break
done
# or simply create a new one
if ! [[ -d "$_3X_WORKER_DIR" ]]; then
    until [[ -d "$_3X_WORKER_DIR" ]] &&
            lockproc "$_3X_WORKER_DIR"/scheduling grab; do
        _3X_WORKER_DIR=$(mktemp -d "$WORKER_DIR_PREFIX"XXXXXX)
    done
fi
_3X_WORKER_DIR=$(cd "$_3X_WORKER_DIR" && pwd -P)
_3X_WORKER_ID=${_3X_WORKER_DIR##*$WORKER_DIR_PREFIX}

# keep a copy of the target execution environment configuration while for this session
cp -a "$_3X_TARGET_DIR"/. "$_3X_WORKER_DIR"/target
echo "$_3X_TARGET" >"$_3X_WORKER_DIR"/target.name

export _3X_WORKER_DIR
_3X_LOGLVL=$((_3X_LOGLVL+1)) \
dequeue
