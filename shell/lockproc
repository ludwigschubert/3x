#!/usr/bin/env bash
# lockproc -- process lock functions on top of lockfile
# 
# > lockproc LOCKFILE grab PGID
# Grabs the lock from this process group.
# 
# > lockproc LOCKFILE release
# Releases the lock.
# 
# > lockproc LOCKFILE kill [-SIGNAL]
# Kills the owner process of this lock, with given SIGNAL or SIGTERM.
# 
# > lockproc LOCKFILE alive
# Checks whether the process who grabbed the lock is still alive.
# 
# > lockproc LOCKFILE owner
# Shows the owner process of this lock.
#
# Created: 2009-10-07
# 
# Written by Jaeho Shin <netj@sparcs.org>.
# (C) 2006-2009, Geoul Project. (http://project.sparcs.org/geoul)
set -eu

LockArg=$1; shift

# use target if lock is a symlink
Lock=$(readlink -f "$LockArg")
: ${Lock:=lock}


# look for existing file locking primitives
has() { type "$@" &>/dev/null; }
if has dotlockfile; then
    # dotlockfile(1) in liblockfile
    lockfile-acquire() {
        dotlockfile -l -r3 "$1"
        # XXX We won't bother touching the timestamp, since we check the owner process anyway
        #while sleep 5; [[ $(cat "$1".keeper.pid 2>/dev/null) = $BASHPID ]]; do
        #    dotlockfile -t "$1"
        #done &
        #echo $! >"$1".keeper.pid
    }
    lockfile-release() {
        # XXX no timestamp keeper
        #local pidf="$1".keeper.pid
        #local pid=$(cat "$pidf" 2>/dev/null || echo)
        #[ -z "$pid" ] || kill -TERM $pid || true
        #rm -f "$pidf"
        dotlockfile -u "$1"
    }

elif has lockfile-create && has lockfile-remove; then
    # lockfile-create(1) and others in lockfile-progs Debian package
    lockfile-acquire() {
        lockfile-create --lock-name --retry 3 "$1"
        # XXX We won't bother touching the timestamp, since we check the owner process anyway
        #lockfile-touch "$1" &
        #echo $! >"$1".keeper.pid
    }
    lockfile-release() {
        # XXX no timestamp keeper
        #local pidf="$1".keeper.pid
        #local pid=$(cat "$pidf" 2>/dev/null || echo)
        #[ -z "$pid" ] || kill -TERM $pid || true
        #rm -f "$pidf"
        lockfile-remove --lock-name "$1"
    }

elif has lockfile; then
    # lockfile(1) in procmail
    lockfile-acquire() { lockfile -1 -r3 "$1" 2>/dev/null; }
    lockfile-release() { rm -f "$1"; }

else
    {
    echo "lockproc: No file locking primitive available!"
    echo "          You must install one of the followings:"
    echo "            liblockfile or liblockfile-bin, or"
    echo "            procmail, or lockfile-progs."
    exit 127
    } >&2
fi

lock-is-modifiable() {
    if [ -w "$Lock" -o -w "$(dirname "$Lock")" ]; then
        true
    else
        echo "$LockArg: Permission denied" >&2
        false
    fi
}

# remote shell
use-remote-shell-when-needed() {
    local host=$1
    [ -z "$host" -o x"$host" = x"$HOSTNAME" ] ||
        rsh="ssh -o BatchMode=yes -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o ConnectTimeout=5 $host"
}
test-remote-shell() {
    [ $# -gt 0 ] || set -- uptime
    [ -z "$rsh" ] || $rsh "$@" >/dev/null
}

lockproc() {
    local Cmd=$1; shift || true
    case "$Cmd" in
        grab)
        local pgid=${1:-$(ps -o pgid= -p $$)}
        if lock-is-modifiable; then
            # clean dead lock
            lockproc alive || lockproc clean
            # use lockfile(1) included in procmail(1)
            if lockfile-acquire "$Lock"; then
                # record owner process info
                {
                    echo "$HOSTNAME:$(echo -n $pgid)"
                    ps -o pid=,pgid=,command= -p $pgid 2>/dev/null | sha1sum | awk '{print $1}'
                } >"$Lock".owner
            else
                false
            fi
        else
            false
        fi
        ;;

        release)
        if lock-is-modifiable; then
            # TODO allow releases only from the owning process group
            lockproc clean
        else
            false
        fi
        ;;

        clean)
        lockfile-release "$Lock"
        rm -f "$Lock".*
        ;;

        owner)
        local owner= signature=
        if [ -r "$Lock".owner ] && { read owner; read signature || true; } <"$Lock".owner; then
            echo owner=\'"$owner"\'
            echo host=\'$(echo -n ${owner%:*})\'
            echo pgrp=\'$(echo -n ${owner#*:})\'
            echo signature=\'$(echo -n ${signature})\'
        else
            echo false
        fi
        ;;

        alive)
        if [ -e "$Lock" ]; then
            local owner= host= pgrp= signature=
            eval $(lockproc owner)
            [ -n "$pgrp" ]
            # use remote shell when necessary,
            local rsh=; use-remote-shell-when-needed "$host"
            # XXX assuming lock is not alive when remote shell isn't responding, hence nothing must be running there
            test-remote-shell ps || { c=$?; lockproc clean; exit $c; }
            pscmd=($rsh ps -o pid=,pgid=,command= -p $pgrp)
            if [ -n "$signature" ]; then
                psout=$("${pscmd[@]}" 2>/dev/null)
                newSignature=$(sha1sum <<<"$psout" | awk '{print $1}')
                [ x"$newSignature" = x"$signature" ]
            else
                "${pscmd[@]}" &>/dev/null
            fi
        else
            false
        fi
        ;;

        kill) # kill the lock owner and clean it
        local sig=${1:-TERM}; shift || true
        sig=${sig#-}
        local nrtries=${1:-1}; shift || true
        local retries="seq $nrtries"
        # we will send KILL until all processes disappear
        case $sig in KILL) retries=yes ;; esac
        local owner= host= pgrp=
        eval $(lockproc owner)
        if [ -n "$owner" ]; then
            # use remote shell, but don't proceed if broken
            local rsh=; use-remote-shell-when-needed "$host"
            test-remote-shell kill -l || return 127
            # send signal
            $retries | while read; do
                lockproc alive || break
                $rsh kill -$sig -$pgrp
                sleep 1
            done
            # clean the lock if process is gone
            lockproc alive || lockproc clean
        fi
        ;;

        "") usage "$0" ;;
        *) usage "$0" "$Cmd: unknown command" ;;
    esac
}

lockproc "$@"
