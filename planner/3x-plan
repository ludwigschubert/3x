#!/usr/bin/env bash
# 3x-plan -- plan experimental runs
# 
# New runs can be added to current queue by generating the full combination of
# values for input variables with the following command:
# > 3x plan [NAME[=VALUE[,VALUE]...]]...
# 
# Once runs are planned for the queue, they can be easily reordered,
# duplicated, or removed using your $EDITOR when you run the following command:
# > 3x plan
#
# 
# To add runs for a full combination of inputs, simply run:
# > 3x plan `3x inputs`
# To list allowed values for available input variables, run:
# > 3x inputs -v
# 
# 
# The default current queue is named "main".  It can be changed with:
# > 3x queue
# Or, by setting the environment variable $_3X_QUEUE to the name of the desired
# queue, e.g., `export _3X_QUEUE=alt` to use run/queue/alt/.
#
# 
# > 3x plan results RESULTS_QUERY
# > 3x plan skip    RESULTS_QUERY
# Another way to plan more runs is based on the results so far.  You can narrow
# down the list of results and use the same set of inputs to plan more
# experiments.  If you want to run inputs complementary to a set of results,
# that is also possible with `3x plan skip`.  In this alternative usage, you
# can plan more runs conditioning on the outputs so far.
# 
# 
# It is possible to quickly duplicate, move, or remove entries in the plan with
# reference to serial numbers of runs, shown in the output of `3x status`.
# > 3x plan duplicate  SERIAL...
# > 3x plan prioritize SERIAL...
# > 3x plan postpone   SERIAL...
# > 3x plan cancel     SERIAL...
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

. find-queue.sh

# do a sanity check before we proceed
update-assembly-script >/dev/null

# create the queue directory if needed
mkdir -p -- "$_3X_QUEUE_DIR"

# how to generate example usages
showExampleUsages() {
    msg "# Try commands similar to these examples:"
    3x-inputs -v | shuf | {
        NUM_EXAMPLES=4 MAX_VALUES=8
        i=1 j=1 args=
        while IFS='='; read name values; do
            IFS=,; set -- $values
            n=$(($RANDOM % $# % $MAX_VALUES))
            case $n in
                [0-3])
                    let ++n
                    let j+=$n
                    vs=$(printf '%s\n' "$@" |
                        shuf | head -n $n | tr '\n' ,)
                    args+="  $name=${vs%,}"
                    ;;
                *)
                    args+="  $name"
                    let ++j
                    ;;
            esac
            p=$(($RANDOM % 2))
            [[ $j -lt $MAX_VALUES ]] || p=0
            case $p in
                0)
                    msg "3x plan$args"
                    j=0 args=
                    [[ $i -lt $NUM_EXAMPLES ]] || break
                    let ++i
                    ;;
                *)
                    ;;
            esac
        done
        [ -z "$args" ] || msg "3x plan$args"
    }
    false
}

# knowing how to generate combinations is important
permute() {
    local prefix=$1; shift
    if [[ $# == 0 ]]; then
        echo "$prefix"
    else
        local varSpec=$1; shift
        local name=${varSpec%%=*}
        local OIFS=$IFS
        IFS=,
        local values=(${varSpec#$name=})
        IFS=$OIFS
        local value=
        prefix+=" $name="
        for value in "${values[@]}"; do
            permute "$prefix$value" "$@"
        done
    fi
}

list-PLANNED() {
    queue list "state#"=PLANNED |
    sed '
    s/^PLANNED[[:space:]]*/run	/
    s/[[:space:]]*$//
    s/[[:space:]]*\(#[[:digit:]]*\)/		\1/
    '
}

tmp=$(mktemp -d "$_3X_QUEUE_DIR"/plan.XXXXXX)
trap "rm -rf -- $tmp" EXIT
computePlanHash() { list-PLANNED | sha1sum; }
planSHA1orig=$(computePlanHash)
planWithFiles=()
planAppend=false

# use $EDITOR only when we're in a terminal
[ -t 0 -a -t 1 ] || EDITOR=true

# decide how we want to plan
if [ $# -gt 0 ]; then
    Command=$1; shift
else
    Command=
fi
case $Command in
    duplicate|prioritize|postpone|cancel)
        [ $# -gt 0 ] || usage "$0" "No SERIAL given to $Command runs"
        queue $Command "$@"
        ;;


    with|add) # based on given files
        if [ $# -gt 0 ]; then
            for f; do
                # adjust _3X_ROOT-relative paths
                [ -e "$f" ] ||
                    ! [ -e "$_3X_ROOT/$f" ] || f="$_3X_ROOT/$f"
                planWithFiles+=("$(readlink -f "$f")")
            done
            set -- "${planWithFiles[@]}"
        fi
        {
            cat "$@"
            echo
        } >"$tmp"/new
        case $Command in add) planAppend=true; esac
        ;;

    results|skip) # based on query over results
        results=$Command
        invertResults=false; case $results in skip) invertResults=true ;; esac

        # record the query and fetch the results
        echo "$@" >"$tmp"/results.query
        3x-results "$@" >"$tmp"/$results

        # transform the results into a plan
        cut -f$(( 1 + $(3x-outputs | wc -l) + 1 ))- <"$tmp"/$results |
        if $invertResults; then # TODO invert from the combination
            excl="$tmp"/skipped
            sort | column -t >"$excl"
            permute "" $(normalize-inputs -v \
                $(tr ' \t' '\n' <"$excl" | sed -n 's/=.*//p' | sort -u)) |
                sort | column -t |
            comm -13 "$excl" -
        else awk '!seen[$0] {seen[$0]++;print}' # filter duplicate inputs
        fi |
        sed 's/^/run	/' >"$tmp"/new
        planAppend=true
        ;;

    help|"-h")
        usage "$0"
        showExampleUsages
        exit
        ;;

    "") # edit the current plan
        list-PLANNED >"$tmp"/new
        if ! [ -s "$tmp"/new ]; then # show usage first if empty
            usage "$0" "Plan is empty for $_3X_QUEUE_ID; specify input variables to add." ||
                showExampleUsages
        fi
        ;;

    *) # by editing combinations generated from given input values
        # normalize command-line arguments
        args=($(normalize-inputs -nv "$Command" "$@"))
        [ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"

        # permute the arguments and generate a plan
        msg "Permuting inputs for ${@%%=*}..."
        permute "run " "$@" >"$tmp"/new
        planAppend=true
        ;;
esac

# prepare the full plan so user can edit when possible
if $planAppend && ! [ x"${EDITOR:-}" = x"true" ]; then
    planSHA1orig=$(computePlanHash)
    mv -f "$tmp"/new "$tmp"/more
    { list-PLANNED; cat "$tmp"/more; } | column -t >"$tmp"/new
    planAppend=false
fi

cd "$_3X_QUEUE_DIR"

if [ -e "$tmp"/new ]; then

# decide whether we replace or append to current plan
if $planAppend; then
    queue plan-more <"$tmp"/new
elif edit "$tmp"/new "$tmp"/timestamp; then
    # let user do a finish edit of the generated plan
    sanitize() {
        local i=$1 o=$2
        # check if every line starts with `run '
        ! grep -Hn -E -v '^run[[:space:]]+|^[[:space:]]*$' "$i" ||
            error "Syntax Error: All plan lines must start with \`run '" || return $?
        # discard empty lines
        grep -E -v '^[[:space:]]*$' <"$i" >"$o" || true
        # TODO check whether all input values are sane
    }
    confirm-if-changed() {
        if ! [ x"$planSHA1orig" = x"$(computePlanHash)" ]; then
            # show error if changed
            error "Plan for $_3X_QUEUE_ID changed since editing" || true
            if [ -t 0 -a -t 1 ]; then
                # confirm overwrite
                while :; do
                    read -n 1 -p "Overwrite and discard changes? (y/n) " || true
                    echo
                    case $REPLY in
                        [yY]) return 0 ;;
                        [nN]) break ;;
                    esac
                done
            fi
            false
        fi
    }
    sanitize "$tmp"/new "$tmp"/sanitized &&
    confirm-if-changed ||
    {
        # in case there's error, keep the erroneous one for later retries
        savedPlan=$(mktemp "$_3X_ROOT"/.3x/plan.editing.XXXXXX)
        cp -pf "$tmp"/new $savedPlan
        chmod --reference="$_3X_ROOT" "$savedPlan" # TODO copy ACL from _3X_ROOT?
        msg "Edit the file and retry with the following command:"
        msg "  3x plan with ${savedPlan#$_3X_ROOT/}"
        false
    }
    cat "$tmp"/sanitized | queue plan
    if [ ${#planWithFiles[@]} -gt 0 ]; then
        # clean up any temporary file for `plan with`
        for f; do
            case $f in
                "$_3X_ROOT"/.3x/plan.editing.*)
                    rm -f "$f"
                    ;;
            esac
        done
    fi
else
    msg "No changes made to plan for $_3X_QUEUE_ID"
    exit 2
fi

fi

# and summarize the new plan for queue
msg "3x: updated plan for $_3X_QUEUE_ID ($(list-PLANNED | wc -l) runs)"

# and notify queue-changed if already started,
if queue-is-active; then
    . find-runner.sh -
    setsid queue-changed &
else # or give instructions how to start the queue
    msg "# To start executing, run:"
    msg "3x start"
fi
