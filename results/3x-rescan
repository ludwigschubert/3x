#!/usr/bin/env bash
# 3x-rescan -- extract outputs from runs, optionally with new extractors
# 
# > 3x rescan [-f] [RUN]...
# 
# If -f option is given, existing output extractors will be removed and
# replaced with the updated ones.
#
# To re-extract outputs whose name match a certain extglob pattern PATT:
# > _3X_RESCAN_ONLY=PATT \
# > 3x rescan [RUN]...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu
shopt -s extglob

. find-run-archive.sh

ForceExtractExisting=false
while getopts "f" o; do
    case $o in
        f)
            ForceExtractExisting=true
            ;;
    esac
done
shift $(( $OPTIND - 1 ))

SHLVL=$(( $SHLVL + 2 )) \
update-assembly-script >/dev/null

: ${_3X_RESCAN_ONLY:=}

outputNames=$(3x-outputs)
if [[ -n "$_3X_RESCAN_ONLY" ]]; then
    filteredOutputNames=
    for o in $outputNames; do
        [[ "$o" == $_3X_RESCAN_ONLY ]] || continue
        filteredOutputNames+=" $o"
    done
    outputNames=${filteredOutputNames# }
fi

# make sure we have the index up-to-date
3x-index init

find-rundirs "$@" -- |
{
cd "$_3X_ROOT"
export \
    _3X_ARCHIVE \
    _3X_ASSEMBLE \
    _3X_RESCAN_ONLY \
    ForceExtractExisting \
    outputNames \
    #
# GNU parallel this + 3x-index update
#FIXME
parallel --plain --max-procs 50% --no-run-if-empty --ungroup '
set -eu
let SHLVL-=2 || true
rescan1() {
    runId=$1
    cd "$runId"
    # first, figure out which output variables we need to extract
    outputsToExtractPatt=
    for o in $outputNames; do
        ox=outputs/$o/$_3X_API_EXTRACTOR
        ! [ -x "$ox" ] || $ForceExtractExisting || continue
        outputsToExtractPatt+="|$o"
    done
    outputsToExtractPatt=${outputsToExtractPatt#|}
    # proceed only if we need to extract something
    [[ -n "$outputsToExtractPatt" ]] || return 0
    # assemble new output extractors for this run
    newRunDir=$(mktemp -d "${TMPDIR:-/tmp}"/3x-rescan.XXXXXX)
    trap "rm -rf $newRunDir" EXIT
    (   let SHLVL+=2
        mkdir -p "$newRunDir"/workdir
        touch "$newRunDir"/workdir/run
        chmod +x "$newRunDir"/workdir/run
        _3X_IMPORT_ONLY="output@(|/@($outputsToExtractPatt))" \
        "$_3X_ASSEMBLE" "$newRunDir" $(cat ./input) -- $(cat ./env) >/dev/null
        chmod +w .
        mkdir -p outputs
        unarchive "$_3X_ARCHIVE" output outputs
    )
    # inject new extractors to outputs/*/
    OIFS=$IFS IFS="|"; set -- $outputsToExtractPatt; IFS=$OIFS
    for o; do
        o=outputs/$o
        newO="$newRunDir"/$o
        msg -1 "$runId: updating $o"
        # replace the output extractor keeping previous one as numbered backup
        if [ -e "$o" ]; then
            mkdir -p outputs/.backup
            mv -f --backup=numbered "$o" outputs/.backup/.
        fi
        mv -f --backup=none "$newO" outputs/
    done
    # update files right beneath outputs/
    for newF in "$newRunDir"/outputs/*; do
        ! [ -d "$newF" ] || continue # skip any directories
        [ -e "$newF" ] || continue # skip any non-existent ones
        f=outputs/"${newF##*/}"
        # skip backup if identical
        if ! [ -e "$f" ] || [ x"$(git hash-object "$newF")" != x"$(git hash-object "$f")" ]; then
            msg -1 "$runId: updating $f"
            if [ -e "$f" ]; then
                mkdir -p outputs/.backup
                mv -f --backup=numbered "$f" outputs/.backup/
            fi
            mv -f --backup=none "$newF" outputs/
        fi
    done
    # extract output, dedup, and seal back run directory for storage
    (   let SHLVL+=2
        if [[ -n "$_3X_RESCAN_ONLY" ]]; then
            extractOnlyPatt="@($outputsToExtractPatt)"
            # copy-on-write for incremental output extraction
            cp -f output output.$$
            mv -f output.$$ output
            chmod +w output
        else
            # if no pattern were specified, extract all output variables again
            extractOnlyPatt=
        fi
        _3X_EXTRACT_ONLY=$extractOnlyPatt \
        extract-output "$runId" || true
        archive "$_3X_ARCHIVE" output outputs
        #XXX chmod -w .
    )
    # done
    echo "$runId"
}; rescan1 ' :::
} |
xargs -L10 -- 3x-index update
